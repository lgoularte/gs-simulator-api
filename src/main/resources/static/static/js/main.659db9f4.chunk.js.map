{"version":3,"sources":["ApiService.js","components/Simulation.js","App.js","reportWebVitals.js","index.js"],"names":["steps","headers","Headers","append","init","method","mode","fetch","response","blob","text","result","Simulation","React","useState","simulationSteps","setSimulationSteps","simulationResult","setSimulationResult","valid","setValid","className","onSubmit","event","preventDefault","stopPropagation","apiService","simulateInfiniteGrid","then","id","type","min","value","onChange","target","Number","parseInt","isNaN","htmlFor","name","disabled","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAce,M,sJAZcA,G,sFACnBC,EAAU,IAAIC,SACZC,OAAO,SAAU,oBACnBC,EAAO,CAAEC,OAAQ,MAAOJ,QAASA,EAASK,KAAM,Q,SAC/BC,MAAM,4DAAD,OAA6DP,GAASI,G,cAA5FI,E,gBACaA,EAASC,O,cAAtBA,E,iBACeA,EAAKC,O,eAApBC,E,yBACCA,G,2GC4DIC,MAlEf,WAAuB,IAAD,EAC0BC,IAAMC,SAAS,IADzC,mBACbC,EADa,KACIC,EADJ,OAE4BH,IAAMC,WAFlC,mBAEbG,EAFa,KAEKC,EAFL,OAGML,IAAMC,UAAS,GAHrB,mBAGbK,EAHa,KAGNC,EAHM,KA0CpB,OACE,sBAAKC,UAAU,YAAf,UACE,qDACA,sBAAKA,UAAU,UAAf,UACE,gDACA,uBAAMC,SA1CU,SAACC,GACrBA,EAAMC,iBACND,EAAME,kBACNP,EAAoB,MACpBQ,EAAWC,qBAAqBZ,GAAiBa,MAAK,SAACjB,GACrDO,EAAoBP,GACpBK,EAAmB,IACnBI,GAAS,OAmCwBC,UAAU,kBAAzC,UACE,sBAAKA,UAAU,+BAAf,UACE,uBAAOQ,GAAG,QAAQC,KAAK,SAASC,IAAI,IAAIC,MAAOjB,EAAiBkB,SAjChD,SAACV,GAAW,IAC5BW,EAAWX,EAAXW,OACFF,EAAQG,OAAOC,SAASF,EAAOF,QAChCG,OAAOE,MAAML,IAAUA,EAAQ,GAClChB,EAAmBgB,GACnBZ,GAAS,KAETJ,EAAmB,IACnBI,GAAS,KAyB0FC,UAAU,aACvG,uBAAOiB,QAAQ,QAAf,iCAEF,8BACE,yBAAQjB,UAAU,+BAA+BS,KAAK,SAASS,KAAK,SAASC,UAAWrB,EAAxF,gBAEE,mBAAGE,UAAU,uBAAb,6BAKR,qBAAKA,UAAU,YA/BbJ,EAEA,sBAAKI,UAAU,UAAf,UACE,mDACA,qBAAKA,UAAU,oBAAf,SACGJ,OAKF,S,MC/BIwB,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.659db9f4.chunk.js","sourcesContent":["class ApiService {\n\n  async simulateInfiniteGrid(steps) {\n    const headers = new Headers();\n    headers.append('Accept', 'application/json');\n    const init = { method: 'PUT', headers: headers, mode: 'cors' };\n    const response = await fetch(`http://localhost:8080/simulations/white-black-grid?steps=${steps}`, init);\n    const blob = await response.blob();\n    const result = await blob.text();\n    return result;\n  }\n\n}\n\nexport default new ApiService();\n","import React from 'react';\nimport apiService from '../ApiService';\n\nfunction Simulation() {\n  const [simulationSteps, setSimulationSteps] = React.useState('');\n  const [simulationResult, setSimulationResult] = React.useState();\n  const [valid, setValid] = React.useState(false);\n\n  const runSimulation = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setSimulationResult(null);\n    apiService.simulateInfiniteGrid(simulationSteps).then((result) => {\n      setSimulationResult(result);\n      setSimulationSteps('');\n      setValid(false);\n    })\n  };\n\n  const handleStepsChange = (event) => {\n    const { target } = event;\n    const value = Number.parseInt(target.value);\n    if (!Number.isNaN(value) && value > 0) {\n      setSimulationSteps(value);\n      setValid(true);\n    } else {\n      setSimulationSteps('');\n      setValid(false);\n    }\n  };\n\n  const renderSimulationResult = () => {\n    if (simulationResult) {\n      return (\n        <div className=\"section\">\n          <h5>Simulation result</h5>\n          <pre className=\"simulation-result\">\n            {simulationResult}\n          </pre>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  return (\n    <div className=\"container\">\n      <h3>GOM Space simulator</h3>\n      <div className=\"section\">\n        <h5>Run simulation</h5>\n        <form onSubmit={runSimulation} className=\"simulation-form\">\n          <div className=\"input-field simulation-steps\">\n            <input id=\"steps\" type=\"number\" min=\"1\" value={simulationSteps} onChange={handleStepsChange} className=\"validate\" />\n            <label htmlFor=\"steps\">Simulation steps</label>\n          </div>\n          <div>\n            <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\" disabled={!valid}>\n              Run\n              <i className=\"material-icons right\">send</i>\n            </button>\n          </div>\n        </form>\n      </div>\n      <div className=\"divider\"></div>\n      {renderSimulationResult()}      \n    </div>\n  );\n}\n\nexport default Simulation;\n","import Simulation from './components/Simulation';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Simulation />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'materialize-css/dist/js/materialize.min.js';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}